import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

class LidarTracker(Node):
    def __init__(self):
        super().__init__('lidar_tracker')
        
        # Subscriber ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Lidar
        self.subscription = self.create_subscription(
            LaserScan, 
            '/scan', 
            self.lidar_callback, 
            10)

        # Publisher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà TurtleBot3
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.twist = Twist()

    def lidar_callback(self, msg):
        ranges = msg.ranges  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        angles = [0, 90, 180, 270]  # ‡∏≠‡∏á‡∏®‡∏≤‡∏´‡∏•‡∏±‡∏Å
        tolerance = 30  # ‡∏≠‡∏á‡∏®‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡πÄ‡∏ä‡πà‡∏ô inf) ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 4.0 ‡πÄ‡∏°‡∏ï‡∏£ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏)
        valid_ranges = [r if r > 0 else 4.0 for r in ranges]

        # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏¥‡∏®
        distances = {
            angle: min(valid_ranges[max(0, angle - tolerance): min(len(ranges), angle + tolerance + 1)])
            for angle in angles
        }

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: ‡πÉ‡∏Å‡∏•‡πâ -> ‡πÄ‡∏£‡πá‡∏ß, ‡πÑ‡∏Å‡∏• -> ‡∏ä‡πâ‡∏≤ (‡∏£‡∏∞‡∏¢‡∏∞ 0.2 - 4.0 ‡πÄ‡∏°‡∏ï‡∏£)
        min_distance = min(distances.values())
        speed = max(0.1, min(1.5, (4.0 - min_distance) * 0.5))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1 - 1.5 m/s
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        if distances[0] < 4.0:  # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ -> ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            self.twist.linear.x = speed
            self.twist.angular.z = 0.0
            self.get_logger().info(f'üöÄ Moving Forward | Distance: {distances[0]:.2f} m | Speed: {speed:.2f}')
        
        elif distances[180] < 4.0:  # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á -> ‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
            self.twist.linear.x = -speed
            self.twist.angular.z = 0.0
            self.get_logger().info(f'üîÑ Moving Backward | Distance: {distances[180]:.2f} m | Speed: {speed:.2f}')
        
        elif distances[270] < 4.0:  # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ -> ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏° (CW)
            self.twist.linear.x = 0.0
            self.twist.angular.z = -speed
            self.get_logger().info(f'üîÅ Rotating CW | Distance: {distances[270]:.2f} m | Speed: {speed:.2f}')
        
        elif distances[90] < 4.0:  # ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ -> ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏° (CCW)
            self.twist.linear.x = 0.0
            self.twist.angular.z = speed
            self.get_logger().info(f'‚Ü© Rotating CCW | Distance: {distances[90]:.2f} m | Speed: {speed:.2f}')
        
        else:  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ -> ‡∏´‡∏¢‡∏∏‡∏î
            self.twist.linear.x = 0.0
            self.twist.angular.z = 0.0
            self.get_logger().info(f'üõë Stopping | No Object Nearby')

        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
        self.publisher.publish(self.twist)

def main(args=None):
    rclpy.init(args=args)
    node = LidarTracker()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.twist.linear.x = 0.0
        node.twist.angular.z = 0.0
        node.publisher.publish(node.twist)
        node.get_logger().info("üõë CTRL+C Pressed! Stopping TurtleBot3.")
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
